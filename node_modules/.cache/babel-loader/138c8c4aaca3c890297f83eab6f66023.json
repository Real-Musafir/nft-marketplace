{"ast":null,"code":"import _toConsumableArray from \"/Users/shahadath/projects/web3/blockchain/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/shahadath/projects/web3/blockchain/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shahadath/projects/web3/blockchain/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/shahadath/projects/web3/blockchain/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/shahadath/projects/web3/blockchain/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shahadath/projects/web3/blockchain/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/shahadath/projects/web3/blockchain/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/shahadath/projects/web3/blockchain/nft-marketplace-starter-kit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/shahadath/projects/web3/blockchain/nft-marketplace-starter-kit/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from \"../abis/Kryptobird.json\";\nimport { MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardImage, MDBBtn } from \"mdb-react-ui-kit\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() // first up is to detect ethereum provider\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return detectEthereumProvider();\n\n              case 2:\n                provider = _context2.sent;\n\n                if (provider) {\n                  window.web3 = new Web3(provider);\n                } else {\n                  console.log(\"No ethereum provider\");\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, abi, address, contract, totalSupply, i, _KryptoBird;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts[0]\n                }); // create a constant js valriable networkId Which\n                // is set to blockchain network id\n\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                networkData = KryptoBird.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 31;\n                  break;\n                }\n\n                abi = KryptoBird.abi;\n                address = networkData.address;\n                contract = new web3.eth.Contract(abi, address);\n                this.setState({\n                  contract: contract\n                });\n                console.log(this.state.contract, \"okk\"); // call the total supply of our Krypto Bird\n                // grab the total supply on the front end and log the result\n\n                _context3.next = 17;\n                return contract.methods.totalSupply().call();\n\n              case 17:\n                totalSupply = _context3.sent;\n                this.setState({\n                  totalSupply: totalSupply\n                }); // set up an array to keep track ot tokens\n                //load KryptoBird\n\n                i = 1;\n\n              case 20:\n                if (!(i <= totalSupply)) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                _context3.next = 23;\n                return contract.methods.kryptoBirdz(i - 1).call();\n\n              case 23:\n                _KryptoBird = _context3.sent;\n                // how should we handle the state on the frontend?\n                this.setState({\n                  kryptoBirdz: [].concat(_toConsumableArray(this.state.kryptoBirdz), [_KryptoBird])\n                });\n                console.log(this.state.kryptoBirdz, \"KryptoBird\");\n\n              case 26:\n                i++;\n                _context3.next = 20;\n                break;\n\n              case 29:\n                _context3.next = 32;\n                break;\n\n              case 31:\n                window.alert(\"Smart Contract not deployed\");\n\n              case 32:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }() // with minting we are sending information and we\n    // need to specify the account\n\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.mint = function (kryptoBird) {\n      _this.state.contract.methods.mint(kryptoBird).send({\n        from: _this.state.account\n      }).once(\"receipt\", function (receipt) {\n        _this.setState({\n          kryptoBirdz: [].concat(_toConsumableArray(_this.state.kryptoBirdz), [kryptoBird])\n        });\n      });\n    };\n\n    _this.state = {\n      account: \"\",\n      contract: null,\n      totalSupply: 0,\n      kryptoBirdz: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, console.log(this.state.kryptoBirdz), React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow  \",\n        style: {\n          color: \"white\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-brand col-sm-3 col-md-3 mr-0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"KryptoBird NFTs (Non Fungible Tokens)\"), React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nav-item text-nowrap d-none d-sm-none d-sm-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, this.state.account)))), React.createElement(\"div\", {\n        className: \"container-fluid mt-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        style: {\n          opacity: \"0.8\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: {\n          color: \"white\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"KryptoBirdz - NFT Marketplace\"), React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n          var kryptoBird = _this2.kryptoBird.value;\n\n          _this2.mint(kryptoBird);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Add a file location\",\n        className: \"form-control mb-1\",\n        ref: function ref(input) {\n          return _this2.kryptoBird = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        className: \"btn btn-primary btn-black\",\n        value: \"MINT\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }))))), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"row textCenter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, this.state.kryptoBirdz.map(function (kryptoBird, key) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }, React.createElement(MDBCard, {\n          className: \"token img\",\n          style: {\n            maxWidth: \"22rem\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }), React.createElement(MDBCardImage, {\n          src: kryptoBird,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        })));\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/shahadath/projects/web3/blockchain/nft-marketplace-starter-kit/src/components/App.js"],"names":["React","Component","Web3","detectEthereumProvider","KryptoBird","MDBCard","MDBCardBody","MDBCardTitle","MDBCardText","MDBCardImage","MDBBtn","App","loadWeb3","loadBlockchainData","provider","window","web3","console","log","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","abi","address","contract","Contract","state","methods","totalSupply","call","i","kryptoBirdz","alert","props","mint","kryptoBird","send","from","once","receipt","color","opacity","event","preventDefault","value","input","map","key","maxWidth"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from \"../abis/Kryptobird.json\";\nimport {\n  MDBCard,\n  MDBCardBody,\n  MDBCardTitle,\n  MDBCardText,\n  MDBCardImage,\n  MDBBtn,\n} from \"mdb-react-ui-kit\";\n\nclass App extends Component {\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n  // first up is to detect ethereum provider\n  async loadWeb3() {\n    const provider = await detectEthereumProvider();\n\n    if (provider) {\n      window.web3 = new Web3(provider);\n    } else {\n      console.log(\"No ethereum provider\");\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    this.setState({ account: accounts[0] });\n\n    // create a constant js valriable networkId Which\n    // is set to blockchain network id\n    const networkId = await web3.eth.net.getId();\n    const networkData = KryptoBird.networks[networkId];\n\n    if (networkData) {\n      const abi = KryptoBird.abi;\n      const address = networkData.address;\n      const contract = new web3.eth.Contract(abi, address);\n\n      this.setState({ contract });\n      console.log(this.state.contract, \"okk\");\n\n      // call the total supply of our Krypto Bird\n      // grab the total supply on the front end and log the result\n      const totalSupply = await contract.methods.totalSupply().call();\n      this.setState({ totalSupply });\n\n      // set up an array to keep track ot tokens\n      //load KryptoBird\n      for (let i = 1; i <= totalSupply; i++) {\n        const KryptoBird = await contract.methods.kryptoBirdz(i - 1).call();\n        // how should we handle the state on the frontend?\n        this.setState({\n          kryptoBirdz: [...this.state.kryptoBirdz, KryptoBird],\n        });\n        console.log(this.state.kryptoBirdz, \"KryptoBird\");\n      }\n    } else {\n      window.alert(\"Smart Contract not deployed\");\n    }\n  }\n\n  // with minting we are sending information and we\n  // need to specify the account\n\n  mint = (kryptoBird) => {\n    this.state.contract.methods\n      .mint(kryptoBird)\n      .send({ from: this.state.account })\n      .once(\"receipt\", (receipt) => {\n        this.setState({\n          kryptoBirdz: [...this.state.kryptoBirdz, kryptoBird],\n        });\n      });\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: \"\",\n      contract: null,\n      totalSupply: 0,\n      kryptoBirdz: [],\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        {console.log(this.state.kryptoBirdz)}\n        <nav\n          className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow \n         \"\n          style={{ color: \"white\" }}\n        >\n          <div className=\"navbar-brand col-sm-3 col-md-3 mr-0\">\n            KryptoBird NFTs (Non Fungible Tokens)\n          </div>\n          <ul className=\"navbar-nav px-3\">\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n              <small className=\"text-white\">{this.state.account}</small>\n            </li>\n          </ul>\n        </nav>\n\n        <div className=\"container-fluid mt-1\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div\n                className=\"content mr-auto ml-auto\"\n                style={{ opacity: \"0.8\" }}\n              >\n                <h1 style={{ color: \"white\" }}>\n                  KryptoBirdz - NFT Marketplace\n                </h1>\n\n                <form\n                  onSubmit={(event) => {\n                    event.preventDefault();\n                    const kryptoBird = this.kryptoBird.value;\n                    this.mint(kryptoBird);\n                  }}\n                >\n                  <input\n                    type=\"text\"\n                    placeholder=\"Add a file location\"\n                    className=\"form-control mb-1\"\n                    ref={(input) => (this.kryptoBird = input)}\n                  />\n                  <input\n                    type=\"submit\"\n                    className=\"btn btn-primary btn-black\"\n                    value=\"MINT\"\n                  />\n                </form>\n              </div>\n            </main>\n          </div>\n\n          <hr></hr>\n          <div className=\"row textCenter\">\n            {this.state.kryptoBirdz.map((kryptoBird, key) => {\n              return (\n                <div>\n                  <div>\n                    <MDBCard\n                      className=\"token img\"\n                      style={{ maxWidth: \"22rem\" }}\n                    />\n                    <MDBCardImage src={kryptoBird} />\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}